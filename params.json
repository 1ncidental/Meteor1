{
  "name": "meteor-application-template",
  "tagline": "A template for quickly starting Meteor application development",
  "body": "![](https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/home-page.png)\r\n\r\nMeteor-application-template is a sample Meteor 1.4 application that illustrates:\r\n\r\n  * A standard directory layout using 'imports/' as recommended in the [Meteor Guide](https://guide.meteor.com/structure.html) \r\n  * A standard set of Meteor packages and example usage (FlowRouter, AutoForm, Accounts, and Semantic UI)\r\n  * Simple authorization/authentication and use of settings files for initialization.\r\n  * Simple quality assurance using [ESLint](http://eslint.org) with packages to partially enforce the [Meteor Coding Standards](https://guide.meteor.com/code-style.html) and the [AirBnB Javascript Style Guide](https://github.com/airbnb/javascript).\r\n\r\nThe goal of this template is to help you get quickly started doing Meteor development by providing a reasonable directory structure for development and deployment, a set of common extensions to the core framework, and boilerplate code to implement basic page display, navigation, and collection manipulation.\r\n\r\nTo keep this codebase simple and small, some important capabilities are intentionally excluded from this template:\r\n\r\n  * Testing. \r\n  * Security (meteor-application-template enables both autopublish and insecure packages)\r\n\r\nExamples of the these capabilities will be provided elsewhere.\r\n\r\n\r\n## Typical usage\r\n\r\nFirst, [install Meteor](https://www.meteor.com/install).\r\n\r\nSecond, [create a new GitHub repository](https://help.github.com/articles/create-a-repo/), and clone it into your local workspace.\r\n\r\nThird, [download a zip file containing a snapshot of meteor-application-template](https://github.com/ics-software-engineering/meteor-application-template/archive/master.zip).\r\n\r\nFourth, uncompress the zip file, and copy the following files and directories into your repo:\r\n\r\n  * app/  \r\n  * config/\r\n  * .gitignore\r\n  \r\nYou don't need to copy the README.md file (you should write your own), and you don't need to copy the doc/ directory (it contains only screenshots displayed in this page of documentation.)\r\n\r\nNow your local repo should contain the template. To test that everything is OK, cd into the app directory and run the application with the following two commands:\r\n\r\n```\r\n$ meteor npm install\r\n$ meteor --settings ../config/settings.development.json\r\n```\r\n\r\nIf all goes well, the template application will appear at [http://localhost:3000](http://localhost:3000).  You can login using the credentials in [settings.development.json](https://github.com/ics-software-engineering/meteor-application-template/blob/master/config/settings.development.json), or else register a new account.\r\n\r\n## Walkthrough\r\n\r\nThe following sections describe the major features of this template.\r\n\r\n### Directory structure\r\n\r\nThe top-level directory structure is:\r\n\r\n```\r\napp/        # holds the Meteor application sources\r\nconfig/     # holds configuration files, such as settings.development.json\r\ndoc/        # holds developer documentation, user guides, etc.\r\n.gitignore  # don't commit IntelliJ project files, node_modules, and settings.production.json\r\n```\r\n\r\nThis structure separates documentation files (such as screenshots) and configuration files (such as the settings files) from the actual Meteor application.\r\n\r\nThe app/ directory has this structure:\r\n\r\n```\r\nclient/\r\n  lib/           # holds Semantic-UI files.\r\n  head.html      # the <head>\r\n  main.js        # import all the client-side html and js files. \r\n\r\nimports/\r\n  api/           # Define collection processing code (client + server side)\r\n  startup/       # Define code to run when system starts up (client-only, server-only, both)\r\n    both/          \r\n    client/        \r\n    server/        \r\n  ui/\r\n    layouts/     # Layouts contain common elements to all pages (i.e. menubar and footer)\r\n    pages/       # Pages are navigated to by FlowRouter routes.\r\n    stylesheets/ # CSS customizations, if any.\r\n\r\nnode_modules/    # managed by Meteor\r\n\r\npublic/          # static assets (like images) can go here.\r\n  \r\nserver/\r\n   main.js       # import all the server-side js files.\r\n```\r\n\r\n### Import conventions\r\n\r\nThis system adheres to the Meteor 1.4 guideline of putting all application code in the imports/ directory, and using client/main.js and server/main.js to import the code appropriate for the client and server in an appropriate order.\r\n\r\nThis system accomplishes client and server-side importing in a different manner than most Meteor sample applications. In this system, every imports/ subdirectory containing any Javascript or HTML files has a top-level index.js file that is responsible for importing all files in its associated directory.   \r\n\r\nThen, client/main.js and server/main.js are responsible for importing all the directories containing code they need. For example, here is the contents of client/main.js:\r\n\r\n```\r\nimport '/imports/startup/client';\r\nimport '/imports/startup/both';\r\nimport '/imports/api/stuff';\r\nimport '/imports/ui/layouts';\r\nimport '/imports/ui/pages';\r\nimport '/imports/ui/stylesheets/style.css';\r\n```\r\n\r\nApart from the last line that imports style.css directly, the other lines all invoke the index.js file in the specified directory.\r\n\r\nWe use this approach to make it more simple to understand what code is loaded and in what order, and to simplify debugging when some code or templates do not appear to be loaded.  In our approach, there are only two places to look for top-level imports: the main.js files in client/ and server/, and the index.js files in import subdirectories. \r\n\r\nNote that this two-level import structure ensures that all code and templates are loaded, but does not ensure that the symbols needed in a given file are accessible.  So, for example, a symbol bound to a collection still needs to be imported into any file that references it. For example, a server startup file needs to reference the symbol \"Stuff\" in order to initialize the collection, so it must import the symbol Stuff:\r\n\r\n```\r\nimport { Stuff } from '../../api/stuff/stuff.js';\r\nimport { _ } from 'meteor/underscore';\r\n\r\n/**\r\n * A list of Stuff to pre-fill the Collection.\r\n * @type {*[]}\r\n */\r\nconst stuffSeeds = [\r\n  { name: 'Basket', quantity: 3 },\r\n  { name: 'Bicycle', quantity: 2 },\r\n];\r\n\r\n/**\r\n * Initialize the Stuff collection if empty with seed data.\r\n */\r\nif (Stuff.find().count() === 0) {\r\n  _.each(stuffSeeds, function seedStuffs(stuff) {\r\n    Stuff.insert(stuff);\r\n  });\r\n}\r\n```\r\n\r\nThis strategy is not ideal for all application scenarios, but for those just starting to get comfortable with importing in Javascript, it should reduce confusion and import-related bugs.\r\n \r\n### Naming conventions\r\n\r\nThis system adopts the following naming conventions:\r\n\r\n  * Files and directories are named in all lowercase, with words separated by hyphens. Example: accounts-config.js\r\n  * \"Global\" Javascript variables (such as collections) are capitalized. Example: Stuff.\r\n  * Other Javascript variables are camel-case. Example: stuffSeeds.\r\n  * Templates representing pages are capitalized, with words separated by underscores. Example: Add_Stuff_Page.\r\n  * Routes to pages are named the same as their corresponding page. Example: Add_Stuff_Page.\r\n\r\n### Preinstalled packages\r\n\r\nThis application includes a number of additional packages useful for development. Here is a recent output of `meteor list`, with base packages removed.\r\n\r\n```\r\naccounts-password              1.3.0  Password support for accounts\r\naccounts-ui                    1.1.9  Simple templates to add login widgets to an app\r\naldeed:autoform                5.8.1  Easily create forms with automatic insert and update.\r\naldeed:collection2             2.10.0  Automatic validation of insert/update operations on client and server.\r\narillo:flow-router-helpers     0.5.2  Template helpers for flow-router\r\nautopublish                    1.0.7  (For prototyping only) Publish the entire database to all clients\r\ncheck                          1.2.3  Check whether a value matches a pattern\r\nfabienb4:autoform-semantic-ui  0.9.3  Semantic-ui template for aldeed:autoform package.\r\ninsecure                       1.0.7  (For prototyping only) Allow all database writes from the client\r\njuliancwirko:postcss           1.1.1  Minifier for Meteor with PostCSS processing\r\nkadira:blaze-layout            2.3.0  Layout Manager for Blaze (works well with FlowRouter)\r\nkadira:flow-router             2.12.1  Carefully Designed Client Side Router for Meteor\r\nless                           2.7.5  Leaner CSS language\r\nsacha:spin                     2.3.1  Simple spinner package for Meteor\r\nsemantic:ui                    2.2.1  Official Semantic UI Integration for Meteor\r\nzimme:active-route             2.3.2  Active route helpers\r\n```\r\n\r\nIn a nutshell, meteor-application-template includes support for:\r\n\r\n  * Forms (autoform, collection2, check, autoform-semantic-ui )\r\n  * Accounts (accounts-ui, accounts-password and useraccounts:semantic-ui)\r\n  * Routing (flow-router, flow-router-helpers, active-route)\r\n  * Presentation (semantic-ui, spin)\r\n  \r\nIt does not provide security (both autopublish and insecure packages) remain enabled. This is intentional.\r\n\r\n\r\n### Application functionality\r\n\r\nThe application implements a simple CRUD application for managing \"Stuff\", which is a Mongo Collection consisting of a name (String) and a quantity (Number). There are four pages, each implemented by a template in the imports/ui/pages directory. \r\n\r\n#### Home page\r\n\r\nImplemented by the Home_Page template. \r\n\r\n![](https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/home-page.png)\r\n\r\nYou must login to access any page other than the Home page. \r\n\r\n#### List Stuff page\r\n\r\nYou must login to see the contents of the Stuff collection.\r\n\r\n![](https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/list-page.png)\r\n\r\n#### Add Stuff page\r\n\r\nYou must login to add new documents to the Stuff collection.\r\n\r\n![](https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/add-page.png)\r\n\r\n#### Edit Stuff page\r\n\r\nYou must login to add edit documents in the Stuff collection.\r\n\r\n![](https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/edit-page.png)\r\n\r\n\r\n### Collections\r\n\r\nThe application implements a single Collection called \"Stuff\". Each Stuff document has two fields: a String \"name\" and a Number \"quantity\".\r\n\r\nThe Stuff collection is defined in [imports/api/stuff/stuff.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/api/stuff/stuff.js).\r\n\r\nThe Stuff collection is initialized in [imports/startup/server/stuff.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/startup/server/stuff.js).\r\n\r\nNote that this system uses autopublish to avoid the need to define publications and subscriptions.  That said, any templates presenting collection data must use `Template.subscriptionsReady` to ensure that subscription data is available before template rendering. See [imports/ui/pages/list-stuff-page.html](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/pages/list-stuff-page.html) for an example.\r\n\r\n### CSS\r\n\r\nThe application uses [Semantic UI](http://semantic-ui.com/), and installs one Meteor packages: `fabienb4:autoform-semantic-ui`.\r\n\r\nThe Semantic UI theme files are located in [app/client/lib/semantic-ui](https://github.com/ics-software-engineering/meteor-application-template/tree/master/app/client/lib/semantic-ui) directory.\r\n\r\nBecause the application implements a menu fixed to the top of the screen, the [app/imports/ui/stylesheets/style.css](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/stylesheets/style.css) file adds 61px of padding to the body. Other page templates add additional padding to improve the look. \r\n\r\nTo learn more about the Semantic UI theme, see [Semantic-UI-Meteor](https://github.com/Semantic-Org/Semantic-UI-Meteor).\r\n\r\n### Routing\r\n\r\nFor display and navigation among its four pages, the application uses [Flow Router](https://github.com/kadirahq/flow-router).\r\n\r\nRouting is defined in [imports/startup/client/router.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/startup/client/router.js).\r\n\r\n### Forms\r\n\r\nTo implement the Add Stuff and Edit Stuff pages, the application uses [AutoForm](https://github.com/aldeed/meteor-autoform).\r\n\r\nTo present the forms, the application uses the quickform component.  See [imports/ui/pages/add-stuff-page.html](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/pages/add-stuff-page.html) and [imports/ui/pages/edit-stuff-page.html](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/pages/edit-stuff-page.html).\r\n\r\n### Authentication\r\n\r\nFor authentication, the application uses the Meteor accounts-ui package, with some simple customization in [imports/startup/both/accounts-config.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/startup/both/accounts-config.js).\r\n\r\nWhen the application is run for the first time, a settings file (such as [config/settings.development.json](https://github.com/ics-software-engineering/meteor-application-template/blob/master/config/settings.development.json)) should be passed to Meteor. That will lead to a default account being created through the code in [imports/startup/server/accounts.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/startup/server/accounts.js).\r\n\r\nThe application allows users to register and create new accounts at any time.\r\n\r\n### Authorization\r\n\r\nOnly logged in users can manipulate Stuff documents (but any registered user can manipulate any Stuff document, even if they weren't the user that created it.)\r\n\r\nTo prevent users who are not logged in from accessing pages that manipulate Stuff instances, template-based authorization is used following the recommendations in [Implementing Auth Logic and Permissions](https://kadira.io/academy/meteor-routing-guide/content/implementing-auth-logic-and-permissions). \r\n\r\nThe application implements template-based authorization using an If_Logged_In template, defined in [imports/ui/layouts/if-logged-in.html](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/layouts/if-logged-in.html) and [imports/ui/layouts/if-logged-in.js](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/imports/ui/layouts/if-logged-in.js).\r\n\r\n### Configuration\r\n\r\nThe [config](https://github.com/ics-software-engineering/meteor-application-template/tree/master/config) directory is intended to hold settings files.  The repository contains one file: [config/settings.development.json](https://github.com/ics-software-engineering/meteor-application-template/blob/master/config/settings.development.json).\r\n\r\nThe [.gitignore](https://github.com/ics-software-engineering/meteor-application-template/blob/master/.gitignore) file prevents a file named settings.production.json from being committed to the repository. So, if you are deploying the application, you can put settings in a file named settings.production.json and it will not be committed.\r\n\r\n### Quality Assurance\r\n\r\n#### ESLint\r\n\r\nThe application includes a [.eslintrc](https://github.com/ics-software-engineering/meteor-application-template/blob/master/app/.eslintrc) file to define the coding style adhered to in this application. You can invoke ESLint from the command line as follows:\r\n\r\n```\r\n[~/meteor-application-template/app]-> meteor npm run lint\r\n\r\n> meteor-application-template@ lint /Users/philipjohnson/meteor-application-template/app\r\n> eslint .\r\n```\r\n\r\nESLint should run without generating any errors.  \r\n\r\nIt's significantly easier to do development with ESLint integrated directly into your IDE (such as IntelliJ).\r\n\r\n## Screencast\r\n\r\nClick the image below to watch a 27 minute walkthrough of this system.\r\n\r\n[<img src=\"https://raw.githubusercontent.com/ics-software-engineering/meteor-application-template/master/doc/meteor-application-template-youtube.png\" width=\"600\">](https://www.youtube.com/watch?v=kEJN3kjyugs)\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}